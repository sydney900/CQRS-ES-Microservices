version: '3.0'

services:
  apigateway:
    image: apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports: 
      - "64000:80"

  clientservice:
    image: clientservice
    build:
      context: .
      dockerfile: ClientService/Dockerfile
    ports: 
      - "64001:80"

  productservice:
    image: productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    ports: 
      - "64002:80"
      
  typescriptkafkawebapi:
    image: typescriptkafkawebapi
    build:
      context: .
      dockerfile: typescriptkafkawebapi/Dockerfile
    ports: 
      - "64003:80"
    environment: 
      ZOOKEEPERCONNECTIONSTRING: "zookeeper:2181"
      TOPICNAME: "Clients-Topic"
      PARTITIONID: 0
      COMPRESSIONATTRIBUTES: 0
      CONSUMERGROUP: ""
      FROMBEGINNING: "false"

  website:
    image: website
    build:
      context: .
      dockerfile: website/Dockerfile
    environment: 
      KAFKACLIENTCREATEDURL: "typescriptkafkawebapi:64003/clientCreated"
      KAFKASENDCOMMANDURL: "typescriptkafkawebapi:64003/command"

  zookeeper: 
    image: wurstmeister/zookeeper:3.4.6 
    ports: 
      - "2181:2181"

  kafka: 
    image: wurstmeister/kafka
    ports: 
      - "9092:9092" 
    environment: 
      KAFKA_ADVERTISED_HOST_NAME: 0.0.0.0 
      KAFKA_CREATE_TOPICS: "Clients-Topic,Products-Topic" 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 
    volumes:                                                                                                                                                                                                 
      - /var/run/docker.sock:/var/run/docker.sock 